{
  "description": "Security patterns for StratusConnect - malicious code detection patterns",
  "version": "1.0.0",
  "patterns": {
    "sql_injection": {
      "description": "SQL injection attack patterns",
      "severity": "high",
      "patterns": [
        "' OR '1'='1",
        "'; DROP TABLE",
        "UNION SELECT",
        "' OR 1=1 --",
        "'; EXEC xp_",
        "' OR 'x'='x",
        "' OR 1=1#",
        "' OR 1=1/*",
        "admin'--",
        "admin'/*",
        "' OR 'a'='a",
        "' OR 1=1 LIMIT 1 --",
        "') OR ('1'='1",
        "') OR 1=1 --",
        "1' OR '1'='1",
        "1' OR 1=1 --",
        "1' OR 1=1#",
        "1' OR 1=1/*",
        "' OR '1'='1' --",
        "' OR '1'='1' /*",
        "' OR '1'='1' #"
      ]
    },
    "xss": {
      "description": "Cross-site scripting attack patterns",
      "severity": "high",
      "patterns": [
        "<script>",
        "javascript:",
        "onload=",
        "onerror=",
        "onclick=",
        "onmouseover=",
        "<iframe",
        "<object",
        "<embed",
        "<link",
        "<meta",
        "expression(",
        "url(",
        "@import",
        "<style",
        "onfocus=",
        "onblur=",
        "onchange=",
        "onsubmit=",
        "onreset=",
        "onselect=",
        "onkeydown=",
        "onkeyup=",
        "onkeypress=",
        "onmousedown=",
        "onmouseup=",
        "onmousemove=",
        "onmouseout=",
        "oncontextmenu=",
        "onabort=",
        "onbeforeunload=",
        "onerror=",
        "onhashchange=",
        "onload=",
        "onpageshow=",
        "onpagehide=",
        "onresize=",
        "onscroll=",
        "onunload="
      ]
    },
    "command_injection": {
      "description": "Command injection attack patterns",
      "severity": "critical",
      "patterns": [
        "; ls",
        "| cat",
        "& whoami",
        "` id`",
        "$(whoami)",
        "; cat /etc/passwd",
        "| whoami",
        "& dir",
        "` cat /etc/passwd`",
        "$(cat /etc/passwd)",
        "; rm -rf /",
        "| rm -rf /",
        "& del /q /s *",
        "` rm -rf /`",
        "$(rm -rf /)",
        "; wget",
        "| curl",
        "& nc",
        "` wget`",
        "$(wget)",
        "; ping",
        "| ping",
        "& ping",
        "` ping`",
        "$(ping)",
        "; nc",
        "| nc",
        "& nc",
        "` nc`",
        "$(nc)",
        "; telnet",
        "| telnet",
        "& telnet",
        "` telnet`",
        "$(telnet)"
      ]
    },
    "path_traversal": {
      "description": "Path traversal attack patterns",
      "severity": "high",
      "patterns": [
        "../",
        "..\\",
        "..%2f",
        "..%5c",
        "..%252f",
        "..%255c",
        "..%c0%af",
        "..%c1%9c",
        "..%c0%2f",
        "..%c1%af",
        "....//",
        "....\\\\",
        "%2e%2e%2f",
        "%2e%2e%5c",
        "%252e%252e%252f",
        "%252e%252e%255c",
        "..%00/",
        "..%00\\",
        "..%00%2f",
        "..%00%5c"
      ]
    },
    "ldap_injection": {
      "description": "LDAP injection attack patterns",
      "severity": "medium",
      "patterns": [
        "*",
        "&",
        "|",
        "!",
        "(",
        ")",
        "=",
        "cn=*",
        "dn=*",
        "ou=*",
        "dc=*",
        "objectclass=*",
        "filter=",
        "base=",
        "scope=",
        "attributes=",
        "(&(objectclass=*))",
        "(|(objectclass=*))",
        "(!(objectclass=*))",
        "(objectclass=*)",
        "(cn=*)",
        "(dn=*)",
        "(ou=*)",
        "(dc=*)"
      ]
    },
    "nosql_injection": {
      "description": "NoSQL injection attack patterns",
      "severity": "high",
      "patterns": [
        "$where",
        "$ne",
        "$gt",
        "$lt",
        "$regex",
        "$exists",
        "$in",
        "$nin",
        "$all",
        "$or",
        "$and",
        "$nor",
        "$not",
        "$elemMatch",
        "$size",
        "$type",
        "$mod",
        "$text",
        "$geoWithin",
        "$geoIntersects",
        "$near",
        "$nearSphere",
        "$center",
        "$centerSphere",
        "$box",
        "$polygon",
        "$geometry",
        "$maxDistance",
        "$minDistance",
        "$uniqueDocs",
        "$returnKey",
        "$showDiskLoc",
        "$natural",
        "$comment",
        "$explain",
        "$hint",
        "$maxScan",
        "$maxTimeMS",
        "$max",
        "$min",
        "$orderby",
        "$query",
        "$returnKey",
        "$showDiskLoc",
        "$snapshot",
        "$sort"
      ]
    },
    "suspicious_functions": {
      "description": "Suspicious JavaScript functions that could be dangerous",
      "severity": "critical",
      "patterns": [
        "eval(",
        "Function(",
        "setTimeout(",
        "setInterval(",
        "new Function",
        "fs.readFile",
        "fs.writeFile",
        "fs.unlink",
        "fs.rmdir",
        "fs.mkdir",
        "fs.copyFile",
        "fs.rename",
        "child_process.exec",
        "child_process.spawn",
        "child_process.execFile",
        "process.exit",
        "process.kill",
        "require(",
        "import(",
        "fetch(",
        "XMLHttpRequest",
        "crypto.randomBytes",
        "crypto.createHash",
        "crypto.createCipher",
        "crypto.createDecipher"
      ]
    },
    "obfuscated_code": {
      "description": "Obfuscated code patterns",
      "severity": "high",
      "patterns": [
        "eval(atob(",
        "Function(atob(",
        "String.fromCharCode",
        "\\x",
        "\\u",
        "base64",
        "btoa(",
        "atob(",
        "unescape(",
        "escape(",
        "decodeURIComponent(",
        "encodeURIComponent(",
        "fromCharCode",
        "charCodeAt",
        "substring",
        "slice",
        "split",
        "join",
        "reverse",
        "toString",
        "parseInt",
        "parseFloat",
        "Number(",
        "String(",
        "Boolean(",
        "Array(",
        "Object(",
        "Date(",
        "RegExp(",
        "Error(",
        "TypeError(",
        "ReferenceError(",
        "SyntaxError(",
        "RangeError(",
        "URIError(",
        "EvalError("
      ]
    },
    "infinite_loops": {
      "description": "Potential infinite loop patterns",
      "severity": "high",
      "patterns": [
        "while(true)",
        "for(;;)",
        "while(1)",
        "for(;1;)",
        "while(!false)",
        "for(;!false;)",
        "while(!!true)",
        "for(;!!true;)",
        "do{",
        "}while(true)",
        "do{",
        "}while(1)",
        "do{",
        "}while(!false)",
        "do{",
        "}while(!!true)"
      ]
    },
    "memory_exhaustion": {
      "description": "Memory exhaustion attack patterns",
      "severity": "critical",
      "patterns": [
        "new Array(",
        "Array(",
        "new Buffer(",
        "Buffer.alloc(",
        "Buffer.from(",
        "Buffer.allocUnsafe(",
        "new Uint8Array(",
        "new Uint16Array(",
        "new Uint32Array(",
        "new Int8Array(",
        "new Int16Array(",
        "new Int32Array(",
        "new Float32Array(",
        "new Float64Array(",
        "new BigInt64Array(",
        "new BigUint64Array(",
        "new Map(",
        "new Set(",
        "new WeakMap(",
        "new WeakSet("
      ]
    }
  },
  "thresholds": {
    "max_pattern_matches": 5,
    "max_severity_critical": 0,
    "max_severity_high": 3,
    "max_severity_medium": 10,
    "max_severity_low": 20
  },
  "exclusions": {
    "comment_patterns": [
      "//.*test.*",
      "/\\*.*test.*\\*/",
      "//.*example.*",
      "/\\*.*example.*\\*/",
      "//.*demo.*",
      "/\\*.*demo.*\\*/",
      "//.*sample.*",
      "/\\*.*sample.*\\*/"
    ],
    "file_patterns": [
      "**/*.test.*",
      "**/*.spec.*",
      "**/test/**",
      "**/tests/**",
      "**/__tests__/**",
      "**/*.test.js",
      "**/*.test.ts",
      "**/*.test.tsx",
      "**/*.spec.js",
      "**/*.spec.ts",
      "**/*.spec.tsx"
    ],
    "safe_patterns": [
      "console.log",
      "console.error",
      "console.warn",
      "console.info",
      "alert(",
      "confirm(",
      "prompt(",
      "document.getElementById",
      "document.querySelector",
      "addEventListener",
      "JSON.parse",
      "JSON.stringify",
      "Math.",
      "Date.",
      "String.",
      "Number.",
      "Boolean.",
      "Array.",
      "Object."
    ]
  }
}

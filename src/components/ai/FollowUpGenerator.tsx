import React, { useState } from 'react';
import { FileText, Mail, Calendar, Users, Plane, DollarSign, Clock, CheckCircle } from 'lucide-react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Badge } from '@/components/ui/badge';

interface MeetingSummary {
  date: Date;
  duration: number;
  attendees: string[];
  topics: string[];
  keyDecisions: string[];
  actionItems: {
    task: string;
    assignee: string;
    dueDate: Date;
    priority: 'high' | 'medium' | 'low';
  }[];
  nextSteps: string[];
}

interface FollowUpGeneratorProps {
  meetingSummary?: MeetingSummary;
  onClose: () => void;
}

export const FollowUpGenerator: React.FC<FollowUpGeneratorProps> = ({
  meetingSummary,
  onClose
}) => {
  const [generatedContent, setGeneratedContent] = useState<{
    email: string;
    notes: string;
    calendar: string;
  } | null>(null);
  const [isGenerating, setIsGenerating] = useState(false);
  const [customizations, setCustomizations] = useState({
    tone: 'professional',
    includeActionItems: true,
    includeNextSteps: true,
    includeAttendees: true
  });

  // Default meeting summary if none provided
  const defaultSummary: MeetingSummary = {
    date: new Date(),
    duration: 60,
    attendees: ['Sarah Chen (SkyBridge Aviation)', 'Michael Rodriguez (Elite Air Services)', 'David Kim (Global Aviation Partners)'],
    topics: [
      'Transatlantic charter requirements',
      'Fleet expansion opportunities',
      'Crew availability and qualifications',
      'Pricing and contract terms'
    ],
    keyDecisions: [
      'Gulfstream G650ER selected for transatlantic routes',
      'Crew assignment confirmed with Elite Air Services',
      'Pricing agreed at $125,000 per flight',
      'Contract timeline set for 3 weeks'
    ],
    actionItems: [
      {
        task: 'Prepare formal quote for G650ER charter',
        assignee: 'Sarah Chen',
        dueDate: new Date(Date.now() + 2 * 24 * 60 * 60 * 1000), // 2 days
        priority: 'high'
      },
      {
        task: 'Verify crew certifications and availability',
        assignee: 'Michael Rodriguez',
        dueDate: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000), // 3 days
        priority: 'high'
      },
      {
        task: 'Draft contract terms and conditions',
        assignee: 'David Kim',
        dueDate: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000), // 5 days
        priority: 'medium'
      }
    ],
    nextSteps: [
      'Review and approve formal quotes',
      'Schedule contract signing meeting',
      'Coordinate crew training requirements',
      'Arrange aircraft inspection'
    ]
  };

  const summary = meetingSummary || defaultSummary;

  const generateFollowUp = async () => {
    setIsGenerating(true);
    
    // Simulate AI generation delay
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    const email = generateEmail(summary);
    const notes = generateNotes(summary);
    const calendar = generateCalendarInvite(summary);
    
    setGeneratedContent({ email, notes, calendar });
    setIsGenerating(false);
  };

  const generateEmail = (summary: MeetingSummary): string => {
    const tone = customizations.tone === 'formal' ? 'formal' : 'professional';
    
    return `Subject: Follow-up: ${summary.topics[0]} - ${summary.date.toLocaleDateString()}

Dear ${customizations.includeAttendees ? summary.attendees.join(', ') : 'Team'},

Thank you for the productive meeting today regarding ${summary.topics.join(', ')}. I wanted to follow up with a summary of our discussion and next steps.

Meeting Summary:
${summary.topics.map(topic => `• ${topic}`).join('\n')}

Key Decisions Made:
${summary.keyDecisions.map(decision => `• ${decision}`).join('\n')}

${customizations.includeActionItems ? `
Action Items:
${summary.actionItems.map(item => `• ${item.task} (${item.assignee}) - Due: ${item.dueDate.toLocaleDateString()}`).join('\n')}
` : ''}

${customizations.includeNextSteps ? `
Next Steps:
${summary.nextSteps.map(step => `• ${step}`).join('\n')}
` : ''}

I look forward to our continued collaboration on this project. Please don't hesitate to reach out if you have any questions or need clarification on any points discussed.

Best regards,
[Your Name]

---
Generated by StratusConnect AI Assistant
Meeting Duration: ${summary.duration} minutes
Participants: ${summary.attendees.length} attendees`;
  };

  const generateNotes = (summary: MeetingSummary): string => {
    return `MEETING NOTES - ${summary.date.toLocaleDateString()}
===============================================

Meeting Details:
- Date: ${summary.date.toLocaleDateString()}
- Duration: ${summary.duration} minutes
- Attendees: ${summary.attendees.join(', ')}

Discussion Topics:
${summary.topics.map((topic, index) => `${index + 1}. ${topic}`).join('\n')}

Key Decisions:
${summary.keyDecisions.map((decision, index) => `${index + 1}. ${decision}`).join('\n')}

Action Items:
${summary.actionItems.map((item, index) => 
  `${index + 1}. ${item.task}
     Assigned to: ${item.assignee}
     Due: ${item.dueDate.toLocaleDateString()}
     Priority: ${item.priority.toUpperCase()}`
).join('\n\n')}

Next Steps:
${summary.nextSteps.map((step, index) => `${index + 1}. ${step}`).join('\n')}

Follow-up Required:
- Send formal quotes within 48 hours
- Confirm crew availability and certifications
- Schedule contract review meeting
- Arrange aircraft inspection

Notes:
- All parties agreed on Gulfstream G650ER specifications
- Pricing structure accepted by all stakeholders
- Timeline confirmed for 3-week delivery
- Safety protocols discussed and approved

---
Generated: ${new Date().toLocaleString()}
StratusConnect AI Assistant`;
  };

  const generateCalendarInvite = (summary: MeetingSummary): string => {
    return `BEGIN:VCALENDAR
VERSION:2.0
PRODID:-//StratusConnect//AI Assistant//EN
BEGIN:VEVENT
UID:${Date.now()}@stratusconnect.com
DTSTAMP:${new Date().toISOString().replace(/[-:]/g, '').split('.')[0]}Z
DTSTART:${new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString().replace(/[-:]/g, '').split('.')[0]}Z
DTEND:${new Date(Date.now() + 7 * 24 * 60 * 60 * 1000 + summary.duration * 60 * 1000).toISOString().replace(/[-:]/g, '').split('.')[0]}Z
SUMMARY:Follow-up Meeting - ${summary.topics[0]}
DESCRIPTION:Follow-up meeting to review action items and next steps from our previous discussion about ${summary.topics.join(', ')}.
LOCATION:Virtual Meeting
ATTENDEE:${summary.attendees.join('\nATTENDEE:')}
BEGIN:VALARM
TRIGGER:-PT15M
ACTION:DISPLAY
DESCRIPTION:Follow-up Meeting Reminder
END:VALARM
END:VEVENT
END:VCALENDAR`;
  };

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case 'high': return 'bg-red-500/20 text-red-400 border-red-500/30';
      case 'medium': return 'bg-yellow-500/20 text-yellow-400 border-yellow-500/30';
      case 'low': return 'bg-green-500/20 text-green-400 border-green-500/30';
      default: return 'bg-neutral-500/20 text-neutral-400 border-neutral-500/30';
    }
  };

  const copyToClipboard = (text: string, type: string) => {
    navigator.clipboard.writeText(text);
    // In a real implementation, you'd show a toast notification
    console.log(`${type} copied to clipboard`);
  };

  return (
    <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
      <Card className="terminal-card border-terminal-border bg-terminal-card/95 backdrop-blur-sm w-full max-w-4xl max-h-[90vh]">
        <CardHeader>
          <div className="flex items-center justify-between">
            <CardTitle className="text-white flex items-center gap-2">
              <FileText className="w-5 h-5 text-orange-400" />
              Follow-up Generator
            </CardTitle>
            <Button
              variant="ghost"
              size="sm"
              onClick={onClose}
              className="text-neutral-400 hover:text-white"
            >
              ×
            </Button>
          </div>
        </CardHeader>

        <CardContent className="space-y-6">
          {/* Meeting Summary */}
          <div className="p-4 bg-neutral-800 rounded-lg">
            <h3 className="text-lg font-semibold text-white mb-3 flex items-center gap-2">
              <Calendar className="w-5 h-5 text-orange-400" />
              Meeting Summary
            </h3>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
              <div>
                <span className="text-neutral-500">Date:</span>
                <span className="text-white ml-2">{summary.date.toLocaleDateString()}</span>
              </div>
              <div>
                <span className="text-neutral-500">Duration:</span>
                <span className="text-white ml-2">{summary.duration} minutes</span>
              </div>
              <div>
                <span className="text-neutral-500">Attendees:</span>
                <span className="text-white ml-2">{summary.attendees.length}</span>
              </div>
              <div>
                <span className="text-neutral-500">Action Items:</span>
                <span className="text-white ml-2">{summary.actionItems.length}</span>
              </div>
            </div>
          </div>

          {/* Customization Options */}
          <div className="p-4 bg-neutral-800 rounded-lg">
            <h3 className="text-lg font-semibold text-white mb-3">Customization Options</h3>
            <div className="grid grid-cols-2 gap-4">
              <div>
                <label className="text-sm text-neutral-400 mb-2 block">Tone</label>
                <select
                  value={customizations.tone}
                  onChange={(e) => setCustomizations(prev => ({ ...prev, tone: e.target.value }))}
                  className="w-full p-2 bg-neutral-700 border border-neutral-600 rounded text-white text-sm"
                >
                  <option value="professional">Professional</option>
                  <option value="formal">Formal</option>
                  <option value="casual">Casual</option>
                </select>
              </div>
              <div className="space-y-2">
                <label className="text-sm text-neutral-400">Include:</label>
                <div className="space-y-1">
                  <label className="flex items-center gap-2 text-sm text-neutral-300">
                    <input
                      type="checkbox"
                      checked={customizations.includeActionItems}
                      onChange={(e) => setCustomizations(prev => ({ ...prev, includeActionItems: e.target.checked }))}
                      className="rounded border-neutral-600 bg-neutral-700"
                    />
                    Action Items
                  </label>
                  <label className="flex items-center gap-2 text-sm text-neutral-300">
                    <input
                      type="checkbox"
                      checked={customizations.includeNextSteps}
                      onChange={(e) => setCustomizations(prev => ({ ...prev, includeNextSteps: e.target.checked }))}
                      className="rounded border-neutral-600 bg-neutral-700"
                    />
                    Next Steps
                  </label>
                  <label className="flex items-center gap-2 text-sm text-neutral-300">
                    <input
                      type="checkbox"
                      checked={customizations.includeAttendees}
                      onChange={(e) => setCustomizations(prev => ({ ...prev, includeAttendees: e.target.checked }))}
                      className="rounded border-neutral-600 bg-neutral-700"
                    />
                    Attendee List
                  </label>
                </div>
              </div>
            </div>
          </div>

          {/* Action Items Preview */}
          <div>
            <h3 className="text-lg font-semibold text-white mb-3 flex items-center gap-2">
              <CheckCircle className="w-5 h-5 text-orange-400" />
              Action Items
            </h3>
            <div className="space-y-3">
              {summary.actionItems.map((item, index) => (
                <div key={index} className="p-3 bg-neutral-800 rounded-lg border border-neutral-700">
                  <div className="flex items-start justify-between mb-2">
                    <h4 className="font-medium text-white">{item.task}</h4>
                    <Badge variant="outline" className={getPriorityColor(item.priority)}>
                      {item.priority}
                    </Badge>
                  </div>
                  <div className="grid grid-cols-2 gap-4 text-sm">
                    <div>
                      <span className="text-neutral-500">Assigned to:</span>
                      <span className="text-white ml-2">{item.assignee}</span>
                    </div>
                    <div>
                      <span className="text-neutral-500">Due:</span>
                      <span className="text-white ml-2">{item.dueDate.toLocaleDateString()}</span>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>

          {/* Generate Button */}
          <Button
            onClick={generateFollowUp}
            disabled={isGenerating}
            className="w-full bg-orange-500 hover:bg-orange-600 text-white"
          >
            {isGenerating ? (
              <>
                <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                Generating Follow-up...
              </>
            ) : (
              <>
                <FileText className="w-4 h-4 mr-2" />
                Generate Follow-up
              </>
            )}
          </Button>

          {/* Generated Content */}
          {generatedContent && (
            <div className="space-y-4">
              {/* Email */}
              <div>
                <div className="flex items-center justify-between mb-3">
                  <h3 className="text-lg font-semibold text-white flex items-center gap-2">
                    <Mail className="w-5 h-5 text-orange-400" />
                    Follow-up Email
                  </h3>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => copyToClipboard(generatedContent.email, 'Email')}
                    className="border-neutral-600 text-neutral-300 hover:bg-neutral-700"
                  >
                    Copy
                  </Button>
                </div>
                <Textarea
                  value={generatedContent.email}
                  readOnly
                  className="min-h-32 bg-neutral-800 border-neutral-600 text-neutral-300 text-sm"
                />
              </div>

              {/* Meeting Notes */}
              <div>
                <div className="flex items-center justify-between mb-3">
                  <h3 className="text-lg font-semibold text-white flex items-center gap-2">
                    <FileText className="w-5 h-5 text-orange-400" />
                    Meeting Notes
                  </h3>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => copyToClipboard(generatedContent.notes, 'Notes')}
                    className="border-neutral-600 text-neutral-300 hover:bg-neutral-700"
                  >
                    Copy
                  </Button>
                </div>
                <Textarea
                  value={generatedContent.notes}
                  readOnly
                  className="min-h-40 bg-neutral-800 border-neutral-600 text-neutral-300 text-sm"
                />
              </div>

              {/* Calendar Invite */}
              <div>
                <div className="flex items-center justify-between mb-3">
                  <h3 className="text-lg font-semibold text-white flex items-center gap-2">
                    <Calendar className="w-5 h-5 text-orange-400" />
                    Calendar Invite
                  </h3>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => copyToClipboard(generatedContent.calendar, 'Calendar')}
                    className="border-neutral-600 text-neutral-300 hover:bg-neutral-700"
                  >
                    Copy
                  </Button>
                </div>
                <Textarea
                  value={generatedContent.calendar}
                  readOnly
                  className="min-h-24 bg-neutral-800 border-neutral-600 text-neutral-300 text-sm font-mono"
                />
              </div>
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
};
